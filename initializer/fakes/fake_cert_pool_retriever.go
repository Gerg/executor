// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"crypto/x509"
	"sync"

	"code.cloudfoundry.org/executor/initializer"
)

type FakeCertPoolRetriever struct {
	SystemCertsStub        func() (*x509.CertPool, error)
	systemCertsMutex       sync.RWMutex
	systemCertsArgsForCall []struct {
	}
	systemCertsReturns struct {
		result1 *x509.CertPool
		result2 error
	}
	systemCertsReturnsOnCall map[int]struct {
		result1 *x509.CertPool
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCertPoolRetriever) SystemCerts() (*x509.CertPool, error) {
	fake.systemCertsMutex.Lock()
	ret, specificReturn := fake.systemCertsReturnsOnCall[len(fake.systemCertsArgsForCall)]
	fake.systemCertsArgsForCall = append(fake.systemCertsArgsForCall, struct {
	}{})
	fake.recordInvocation("SystemCerts", []interface{}{})
	fake.systemCertsMutex.Unlock()
	if fake.SystemCertsStub != nil {
		return fake.SystemCertsStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.systemCertsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCertPoolRetriever) SystemCertsCallCount() int {
	fake.systemCertsMutex.RLock()
	defer fake.systemCertsMutex.RUnlock()
	return len(fake.systemCertsArgsForCall)
}

func (fake *FakeCertPoolRetriever) SystemCertsCalls(stub func() (*x509.CertPool, error)) {
	fake.systemCertsMutex.Lock()
	defer fake.systemCertsMutex.Unlock()
	fake.SystemCertsStub = stub
}

func (fake *FakeCertPoolRetriever) SystemCertsReturns(result1 *x509.CertPool, result2 error) {
	fake.systemCertsMutex.Lock()
	defer fake.systemCertsMutex.Unlock()
	fake.SystemCertsStub = nil
	fake.systemCertsReturns = struct {
		result1 *x509.CertPool
		result2 error
	}{result1, result2}
}

func (fake *FakeCertPoolRetriever) SystemCertsReturnsOnCall(i int, result1 *x509.CertPool, result2 error) {
	fake.systemCertsMutex.Lock()
	defer fake.systemCertsMutex.Unlock()
	fake.SystemCertsStub = nil
	if fake.systemCertsReturnsOnCall == nil {
		fake.systemCertsReturnsOnCall = make(map[int]struct {
			result1 *x509.CertPool
			result2 error
		})
	}
	fake.systemCertsReturnsOnCall[i] = struct {
		result1 *x509.CertPool
		result2 error
	}{result1, result2}
}

func (fake *FakeCertPoolRetriever) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.systemCertsMutex.RLock()
	defer fake.systemCertsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCertPoolRetriever) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ initializer.CertPoolRetriever = new(FakeCertPoolRetriever)
